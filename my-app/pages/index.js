import Head from "next/head";
import styles from "../styles/Home.module.css";
import Web3Modal from "web3modal";
import { providers, Contract } from "ethers";
import { useState, useEffect, useRef } from "react";
import { CRYPTODEVSCONTRACTADDRESS, abi } from "../constants/index.js";

export default function Home() {
  const [isWalletConnected, setIsWalletConnected] = useState();
  const [isLoading, setIsLoading] = useState(true);
  const [account, setAccount] = useState("");
  const [presaleStarted, setPresaleStarted] = useState(false);
  const [isOwner, setIsOwner] = useState(false);
  const web3ModalRef = useRef();

  const getOwner = async () => {
    try {
      const provider = await getSignerOrProvider();
      const nftContract = new Contract(
        CRYPTODEVSCONTRACTADDRESS,
        abi,
        provider
      );
      const ownerAddress = await nftContract.owner();
      const signer = await getSignerOrProvider(true);
      console.log("getOwner called");
      const address = signer.getAddress();
      const myWalletAddress = await address;
      console.log(ownerAddress);
      console.log(myWalletAddress);
      if (myWalletAddress===ownerAddress) {
        setIsOwner(true);        
        console.log("I called");
      }
    } catch (error) {
      console.log(error);
    }
  };

  const checkIfPresaleStarted = async () => {
    try {
      const provider = await getSignerOrProvider();
      const nftContract = new Contract(
        CRYPTODEVSCONTRACTADDRESS,
        abi,
        provider
      );
      const isSaleStarted = await nftContract.presaleStarted();
      setPresaleStarted(isSaleStarted);
      console.log("checkIfPresaleSatarted Called.");
    } catch (error) {
      console.log(error);
    }
  };

  const getSignerOrProvider = async (isSignerNeeded = false) => {
    const provider = await web3ModalRef.current.connect();
    const web3Provider = new providers.Web3Provider(provider);
    const { chainId } = await web3Provider.getNetwork();
    if (chainId !== 3) {
      window.alert("Switch your network to ropsten testnet.");
      throw new Error("You are not on ropsten testnet.");
    }
    if (isSignerNeeded) {
      const signer = web3Provider.getSigner();
      return signer;
    }
    return web3Provider;
  };

  const connectWallet = async () => {
    try {
      setIsLoading(true);
      const provider = await getSignerOrProvider(true);
      setIsWalletConnected(true);
      const account = await provider.getAddress();
      var accountStr = String(account);
      accountStr =
        accountStr.substring(0, 5) + "..." + accountStr.substring(39);
      setAccount(accountStr);
      setIsLoading(false);
    } catch (error) {
      console.log(error);
    }
  };

  useEffect(() => {
    if (!isWalletConnected) {
      web3ModalRef.current = new Web3Modal({
        network: "ropsten",
        providerOptions: {},
        disabledInjectedProvider: false,
      });
    }
    connectWallet();
    getOwner();
    checkIfPresaleStarted();
  },[]);

  const renderButton = () => {
    if (isLoading) {
      return <div className="style.description">Loading...</div>;
    } else {
      if (!isWalletConnected) {
        return (
          <button className={styles.button} onClick={connectWallet}>
            Connect Wallet
          </button>
        );
      } else{
        if(!presaleStarted && isOwner){
          return (<div><button className={styles.button}>Start Presale</button></div>);
        } 
      }
    }
  };

  return (
    
      <div className={styles.container}>
        <Head>
          <title>NFT Collection</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
      
      <div>{account}</div>
      <div>{renderButton()}</div>
    </div>
  );
}
